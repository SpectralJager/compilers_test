(@module :main
    (@const n 35)

    (@record point :fields
        x::float
        y::float 
    )

    (@record vector :fields
        p0::point
        p1::point 
    )

    (@fn pointToString [pnt::point] <string> :do
        (@return (string/format "($;$)" pnt/x pnt/y)) 
    )
    
    (@fn vectorToString [vec::vector] <string> :do
        (@return (string/format "vec{p0::$,p1::$}" (pointToString vec/p0) (pointToString vec/p1))) 
    )

    (@fn vectorLength [vec::vector] <float> :do
        (@return (math/root (int/add
            (math/pow (int/sub vec/p1/x vec/p0/x) 2)
            (math/pow (int/sub vec/p1/y vec/p0/y) 2)
        )) 2)
    )

    (@fn main :do
        (@var v :of vector (@new vector {
            (@new point {0 0})
            (@new point {2 2})
        }))
        (io/println (string/format "length of $ = $" 
            (vectorToString v) 
            (float/toString (vectorLength vec))))
        (exit 0)
    )
)